generator client {
  provider = "prisma-client-js"
  previewFeatures = []
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String
  role          String        @default("CLIENT")
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime?
  appointments  Appointment[]
  auditLogs     AuditLog[]
  clientProfile Client?
  staffProfile  StaffMember?
  transactions  Transaction[]

  @@index([email])
  @@index([role, isActive])
  @@index([createdAt])
  @@map("users")
}

model StaffMember {
  id               String          @id @default(cuid())
  userId           String          @unique
  name             String
  phone            String?
  avatar           String?
  color            String?
  jobRole          String?
  dateOfBirth      DateTime?
  homeService      Boolean         @default(false)
  status           String          @default("ACTIVE")
  employeeNumber   String?
  qidNumber        String?
  passportNumber   String?
  qidValidity      String?
  passportValidity String?
  medicalValidity  String?
  profileImage     String?
  profileImageType String?
  specialties      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  appointments     Appointment[]
  locations        StaffLocation[]
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule         StaffSchedule[]
  services         StaffService[]

  @@index([name])
  @@index([status])
  @@map("staff_members")
}

model StaffSchedule {
  id        String      @id @default(cuid())
  staffId   String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  staff     StaffMember @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, dayOfWeek])
  @@map("staff_schedules")
}

model Client {
  id                  String          @id @default(cuid())
  userId              String          @unique
  name                String
  phone               String?
  dateOfBirth         DateTime?
  preferences         String?
  notes               String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  address             String?
  city                String?
  email               String?
  isAutoRegistered    Boolean         @default(false)
  preferredLocationId String?
  registrationSource  String?
  state               String?
  zipCode             String?
  preferredLocation   Location?       @relation(fields: [preferredLocationId], references: [id])
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  loyaltyProgram      LoyaltyProgram?
  memberships         Membership[]

  @@index([name])
  @@index([phone])
  @@index([email])
  @@index([preferredLocationId])
  @@map("clients")
}

model Location {
  id                 String            @id @default(cuid())
  name               String
  address            String
  city               String
  state              String?
  zipCode            String?
  country            String
  phone              String?
  email              String?
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  coordinates        String?
  appointments       Appointment[]
  preferredByClients Client[]
  audits             InventoryAudit[]
  services           LocationService[]
  batches            ProductBatch[]
  products           ProductLocation[]
  staff              StaffLocation[]
  transactions       Transaction[]
  transfersFrom      Transfer[]        @relation("TransferFrom")
  transfersTo        Transfer[]        @relation("TransferTo")

  @@index([name])
  @@index([city, country])
  @@index([isActive])
  @@map("locations")
}

model Service {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  duration            Int
  price               Decimal
  category            String
  showPricesToClients Boolean              @default(true)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  appointments        AppointmentService[]
  locations           LocationService[]
  staff               StaffService[]

  @@index([name])
  @@index([category, isActive])
  @@index([price])
  @@map("services")
}

model Appointment {
  id               String               @id @default(cuid())
  bookingReference String               @unique
  clientId         String
  staffId          String
  locationId       String
  date             DateTime
  duration         Int
  totalPrice       Decimal
  status           String               @default("PENDING")
  notes            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  products         AppointmentProduct[]
  services         AppointmentService[]
  client           User                 @relation(fields: [clientId], references: [id])
  location         Location             @relation(fields: [locationId], references: [id])
  staff            StaffMember          @relation(fields: [staffId], references: [id])

  @@index([date])
  @@index([clientId])
  @@index([staffId])
  @@index([locationId])
  @@index([status])
  @@map("appointments")
}

model StaffLocation {
  id         String      @id @default(cuid())
  staffId    String
  locationId String
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  location   Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  staff      StaffMember @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, locationId])
  @@map("staff_locations")
}

model StaffService {
  id        String      @id @default(cuid())
  staffId   String
  serviceId String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  service   Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff     StaffMember @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, serviceId])
  @@map("staff_services")
}

model LocationService {
  id         String   @id @default(cuid())
  locationId String
  serviceId  String
  price      Decimal?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([locationId, serviceId])
  @@map("location_services")
}

model AppointmentService {
  id            String      @id @default(cuid())
  appointmentId String
  serviceId     String
  price         Decimal
  duration      Int
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

model Product {
  id           String               @id @default(cuid())
  name         String
  description  String?
  price        Float
  cost         Float?
  category     String
  type         String
  brand        String?
  sku          String?              @unique
  barcode      String?
  image        String?
  images       String?
  isRetail     Boolean              @default(false)
  isActive     Boolean              @default(true)
  isFeatured   Boolean              @default(false)
  isNew        Boolean              @default(false)
  isBestSeller Boolean              @default(false)
  isSale       Boolean              @default(false)
  salePrice    Float?
  rating       Float?               @default(0)
  reviewCount  Int                  @default(0)
  features     String?
  ingredients  String?
  howToUse     String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  appointments AppointmentProduct[]
  audits       InventoryAudit[]
  batches      ProductBatch[]
  locations    ProductLocation[]
  transfers    Transfer[]

  @@map("products")
}

model ProductLocation {
  id         String   @id @default(cuid())
  productId  String
  locationId String
  stock      Int      @default(0)
  price      Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, locationId])
  @@map("product_locations")
}

model ProductBatch {
  id           String    @id @default(cuid())
  productId    String
  locationId   String
  batchNumber  String
  expiryDate   DateTime?
  quantity     Int       @default(0)
  costPrice    Float?
  supplierInfo String?
  notes        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  location     Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, locationId, batchNumber])
  @@map("product_batches")
}

model Transfer {
  id             String    @id @default(cuid())
  transferId     String    @unique
  productId      String
  productName    String
  fromLocationId String
  toLocationId   String
  quantity       Int
  status         String    @default("completed")
  reason         String?
  notes          String?
  createdBy      String
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  fromLocation   Location  @relation("TransferFrom", fields: [fromLocationId], references: [id])
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  toLocation     Location  @relation("TransferTo", fields: [toLocationId], references: [id])

  @@map("transfers")
}

model InventoryAudit {
  id             String   @id @default(cuid())
  productId      String
  locationId     String
  adjustmentType String
  quantity       Int
  previousStock  Int
  newStock       Int
  reason         String
  notes          String?
  userId         String
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  location       Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_audits")
}

model AppointmentProduct {
  id            String      @id @default(cuid())
  appointmentId String
  productId     String
  quantity      Int         @default(1)
  price         Float
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])

  @@map("appointment_products")
}

model Transaction {
  id                    String    @id @default(cuid())
  userId                String
  amount                Decimal
  type                  String
  status                String    @default("PENDING")
  method                String
  reference             String?
  description           String?
  locationId            String?
  appointmentId         String?
  serviceAmount         Decimal?
  productAmount         Decimal?
  originalServiceAmount Decimal?
  discountPercentage    Decimal?
  discountAmount        Decimal?
  items                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  location              Location? @relation(fields: [locationId], references: [id])
  user                  User      @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model LoyaltyProgram {
  id           String   @id @default(cuid())
  clientId     String   @unique
  points       Int      @default(0)
  tier         String   @default("Bronze")
  totalSpent   Decimal  @default(0)
  joinDate     DateTime @default(now())
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("loyalty_programs")
}

model GiftCard {
  id             String                @id @default(cuid())
  code           String                @unique
  type           String
  originalAmount Decimal
  currentBalance Decimal
  status         String
  issuedDate     DateTime
  expirationDate DateTime?
  issuedBy       String
  issuedByName   String
  issuedTo       String?
  issuedToName   String?
  purchaserEmail String?
  purchaserPhone String?
  message        String?
  location       String
  transactionId  String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  transactions   GiftCardTransaction[]

  @@map("gift_cards")
}

model GiftCardTransaction {
  id            String   @id @default(cuid())
  giftCardId    String
  type          String
  amount        Decimal
  balanceBefore Decimal
  balanceAfter  Decimal
  description   String?
  transactionId String?
  createdAt     DateTime @default(now())
  giftCard      GiftCard @relation(fields: [giftCardId], references: [id], onDelete: Cascade)

  @@map("gift_card_transactions")
}

model MembershipTier {
  id                 String       @id @default(cuid())
  name               String
  description        String
  price              Decimal
  duration           String
  benefits           String
  discountPercentage Int
  maxDiscountAmount  Decimal?
  includedServices   String
  priorityBooking    Boolean      @default(false)
  freeServices       Int          @default(0)
  isActive           Boolean      @default(true)
  sortOrder          Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  memberships        Membership[]

  @@map("membership_tiers")
}

model Membership {
  id                 String                  @id @default(cuid())
  clientId           String
  clientName         String
  tierId             String
  tierName           String
  status             String
  startDate          DateTime
  endDate            DateTime
  autoRenew          Boolean                 @default(true)
  price              Decimal
  discountPercentage Int
  usedFreeServices   Int                     @default(0)
  totalFreeServices  Int                     @default(0)
  location           String
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  transactions       MembershipTransaction[]
  client             Client                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tier               MembershipTier          @relation(fields: [tierId], references: [id])

  @@map("memberships")
}

model MembershipTransaction {
  id           String     @id @default(cuid())
  membershipId String
  type         String
  amount       Decimal?
  description  String?
  serviceId    String?
  serviceName  String?
  createdAt    DateTime   @default(now())
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@map("membership_transactions")
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  userId       String?
  userEmail    String?
  userRole     String?
  resourceType String?
  resourceId   String?
  details      String?
  ipAddress    String?
  userAgent    String?
  location     String?
  severity     String   @default("LOW")
  metadata     String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([severity])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@map("audit_logs")
}
